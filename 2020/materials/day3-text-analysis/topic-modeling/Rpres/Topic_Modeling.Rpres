<style>

.reveal section p {
  color: black;
  font-size: .7em;
  font-weight: normal;
  font-family: 'Helvetica'; #this is the font/color of text in slides
}


.section .reveal .state-background {
    background: white;}
.section .reveal h1,
.section .reveal p {
    color: black;
    position: relative;
    font-family: 'Helvetica';
    font-weight: normal;
    top: 4%;}
   
 
 /* section titles */
.reveal h1 { 
  color: black;
  position: relative;
  font-weight: normal;
  font-family: 'Helvetica'; 
  top: 4%
}    

 
/* slide titles */
.reveal h3 { 
  color: black;
  font-weight: normal;
  font-family: 'Helvetica'; 
}    

.small-code pre code {
  font-size: 1.2em;
}

</style>



Topic Modeling
========================================================
author: Chris Bail 
date: Duke University
autosize: true
transition: fade  
  website: https://www.chrisbail.net  
  Twitter: https://www.twitter.com/chris_bail  
  github: https://github.com/cbail 

What is Topic Modeling?
========================================================

Latent Dirichlet Allocation
========================================================

Example: LDA of Scientific Abstracts
========================================================

<img src="LDA-concept.png" height="400" />


Running Your First Topic Model
========================================================
class: small-code

```{r}
library(topicmodels)
library(tm)

data("AssociatedPress")

inspect(AssociatedPress[1:5, 1:5])

```


Running Your First Topic Model
========================================================
class: small-code

```{r, eval=FALSE}
AP_topic_model<-LDA(AssociatedPress, 
                    k=10, 
                    control = list(seed = 321))
```



Running Your First Topic Model
========================================================
class: small-code

```{r, message=FALSE, warning=FALSE, eval=FALSE}
library(tidytext)
library(dplyr)

AP_topics <- tidy(AP_topic_model, matrix = "beta")

ap_top_terms <- 
  AP_topics %>%
    group_by(topic) %>%
      top_n(10, beta) %>%
        ungroup() %>%
          arrange(topic, -beta)
```



Plot
========================================================
class: small-code
```{r, eval=FALSE}
library(ggplot2)

ap_top_terms %>%
  mutate(term = reorder(term, beta)) %>%
    mutate(topic = paste("Topic #", topic)) %>%
    ggplot(aes(term, beta, fill = factor(topic))) +
      geom_col(show.legend = FALSE) +
        facet_wrap(~ topic, scales = "free") +
          theme_minimal()+
          theme(plot.title = 
            element_text(hjust = 0.5, size=18))+
          labs(
            title = "Topic Model of AP News Articles",
            caption = "Top Terms by Topic (betas)"
          )+
          ylab("")+
          xlab("")+
          coord_flip()
```

Plot
========================================================
<img src="ap_plot.png" height="500" />


Reading Tea Leaves
========================================================


Structural Topic Modeling
========================================================

<img src="stm_diagram.png" height="400" />

See Roberts et al. [(2015)](https://www.structuraltopicmodel.com/). Also ,check out this [great shiny app] (https://cschwem2er.github.io/stminsights/)

Political Blogs from 2008
========================================================
class: small-code
&nbsp;  
```{r, eval=FALSE}
google_doc_id <- "1LcX-JnpGB0lU1iDnXnxB6WFqBywUKpew" 

poliblogs<-read.csv(
  sprintf("https://docs.google.com/uc?id=%s&export=download", 
          google_doc_id), stringsAsFactors = FALSE)

```


Pre-Process
========================================================
class: small-code
&nbsp;  

```{r, eval=FALSE}
library(stm)
processed <- textProcessor(poliblogs$documents, 
                           metadata = poliblogs)
```

Pre-Process
========================================================
class: small-code
&nbsp;  

```{r, eval=FALSE} 
out <- prepDocuments(processed$documents, 
                     processed$vocab, 
                     processed$meta)

docs <- out$documents
vocab <- out$vocab
meta <-out$meta
```


Running a Structural Topic Model
========================================================
class: small-code
&nbsp;  

```{r, message=FALSE, warning=FALSE, eval=FALSE}
First_STM <- stm(documents = out$documents, vocab = out$vocab,
              K = 10, prevalence =~ rating + s(day) ,
              max.em.its = 75, data = out$meta,
              init.type = "Spectral", verbose = FALSE)
```

Plot Top Words
========================================================
class: small-code
&nbsp;  
```{r, eval=FALSE}
plot(First_STM)
```

Plot
========================================================
<img src="topic plot.png" height="400" />

Find Exemplary Passages
========================================================
class: small-code
&nbsp;  

```{r, eval=FALSE}
findThoughts(First_STM, texts = poliblogs$documents,
     n = 2, topics = 3)
```



Choosing k
========================================================
class: small-code
&nbsp;  

```{r, message=FALSE, warning=FALSE, eval=FALSE}
findingk <- searchK(out$documents, out$vocab, K = c(10, 30),
 prevalence =~ rating + s(day), data = meta, verbose=FALSE)

plot(findingk)
```


Choosing k
========================================================

<img src="searchk_plot.png" height="400" />

Working with Meta-Data
========================================================

Working with Meta-Data
========================================================
class: small-code
&nbsp;  
```{r, message=FALSE, warning=FALSE, eval=FALSE}
predict_topics<-estimateEffect(formula = 1:10 ~
                                rating + 
                                s(day), 
                                stmobj = First_STM, 
                                metadata = out$meta, 
                                uncertainty = "Global")
```

Plot
========================================================
class: small-code
&nbsp;  

```{r, eval=FALSE}
plot(predict_topics, covariate = "rating", 
     topics = c(3, 5, 9), model = First_STM, 
     method = "difference",
     cov.value1 = "Liberal", cov.value2 = "Conservative",
     xlab = "More Conservative ... More Liberal",
     main = "Effect of Liberal vs. Conservative",
     xlim = c(-.1, .1), labeltype = "custom",
     custom.labels = c('Topic 3', 'Topic 5','Topic 9'))
```


Plot
========================================================
<img src="lib con.png" height="400" />

Plot Topic Prevalence over Time
========================================================
class: small-code
&nbsp; 
```{r, eval=FALSE}
plot(predict_topics, "day", method = "continuous", 
     topics = 3, model = z, printlegend = FALSE, 
     xaxt = "n", xlab = "Time (2008)")
     monthseq <- seq(from = as.Date("2008-01-01"),
     to = as.Date("2008-12-01"), by = "month")
     monthnames <- months(monthseq)
     axis(1,at = as.numeric(monthseq) - 
     min(as.numeric(monthseq)), labels = monthnames)

```


Plot
========================================================
<img src="topic over time.png" height="400" />

LDAviz
========================================================

<img src="ldaviz.png" height="400" />

Link to software [here](https://cran.r-project.org/web/packages/LDAvis/index.html). Also check out `toLDAvis` in the `stm` package


Topic Models for Short Text
========================================================

stLDA-C (Tierney et al.)
========================================================

<img src="stlda_c.png" height="400" />

Repo [here](https://github.com/g-tierney/stLDA-C_public)


Limitations of Topic Models
========================================================





