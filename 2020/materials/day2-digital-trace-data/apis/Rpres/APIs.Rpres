<style>

.reveal section p {
  color: black;
  font-size: .7em;
  font-weight: normal;
  font-family: 'Helvetica'; #this is the font/color of text in slides
}


.section .reveal .state-background {
    background: white;}
.section .reveal h1,
.section .reveal p {
    color: black;
    position: relative;
    font-family: 'Helvetica';
    font-weight: normal;
    top: 4%;}
   
 
 /* section titles */
.reveal h1 { 
  color: black;
  position: relative;
  font-weight: normal;
  font-family: 'Helvetica'; 
  top: 4%
}    

 
/* slide titles */
.reveal h3 { 
  color: black;
  font-weight: normal;
  font-family: 'Helvetica'; 
}    

.small-code pre code {
  font-size: 1.2em;
}

</style>



APIs
========================================================
author: Chris Bail 
date: Duke University
autosize: true
transition: fade  
  Website: https://www.chrisbail.net  
  Twitter: https://www.twitter.com/chris_bail  
  Github: https://github.com/cbail  


What Is an Application Programming Interface?
========================================================


What Is an Application Programming Interface?
========================================================

<img src="api_diagram.png" height="500" />



Growth of APIS
========================================================
<img src="api_growth.png" height="500" />


More than >22,000 APIs!
========================================================

<img src="programmableweb.png" height="150" />
<img src="anyapi.png" height="150" />



https://www.programmableweb.com/apis/directory 
&nbsp;  

https://any-api.com/


How Does an API Work?
========================================================
&nbsp;


Google Maps API Example
========================================================



Anatomy of an API Call
========================================================

<img src="Anatomy of an API Call.png" height="400" />


Output of API call:
========================================================

<img src="duke_google.png" height="500" />


Designing your Own API Calls
========================================================

Designing your Own API Calls
========================================================
&nbsp;

<img src="Anatomy of an API Call.png" height="400" />




API Credentials
========================================================



Example: Facebook API
========================================================
&nbsp;

Navigate to:

https://developers.facebook.com/tools/explorer?classic=0


Example: Facebook API
========================================================

<img src="graphexplorer.png" height="600" />

Rate Limiting
========================================================



Rate Limiting
========================================================


```{r, echo=FALSE}
library(tidyverse)

time <- c(3, 6, 9, 12, 15, 18)
tweets_collected <- c(0, 7, 10, 0, 0, 0)
tweets_requested <- c(0, 7, 11, 14, 18, 23)

data_to_plot <- tibble(time, tweets_collected, tweets_requested)

ggplot(data_to_plot, aes(x = time)) +
  geom_ribbon(aes(ymin = 0, ymax = tweets_requested), 
              fill = "violetred2") +
  geom_line(y = tweets_requested) + 
  geom_ribbon(aes(x = time, ymin = 0, ymax = tweets_collected), 
              fill = "chartreuse3") +
  geom_line(y = tweets_collected) + 
  xlab("Time (in minutes)") + 
  ylab("Number of Tweets (in thousands)") + 
  annotate("text", x = 8, y = 3, label = "# of Tweets Collected", size = 4) +
  annotate("text", x = 15, y = 3, label = "# of Tweets Requested", size = 4) +
  annotate("segment", x = 12, xend = 12, y = 0, yend = 20,
           linetype = "dashed") +
  annotate("text", x = 12, y = 21, label = "Rate limiting", size = 4) +
  theme_classic()
```



Throttling
========================================================


```{r, echo=FALSE}
library(tidyverse)

time <- c(3, 6, 9, 12, 15, 18)
tweets_collected <- c(0, 7, 10, 0, 0, 0)
tweets_requested <- c(0, 7, 11, 14, 18, 23)

data_to_plot <- tibble(time, tweets_collected, tweets_requested)

ggplot(data_to_plot, aes(x = time)) +
  geom_ribbon(aes(ymin = 0, ymax = tweets_requested), 
              fill = "violetred2") +
  geom_line(y = tweets_requested) + 
  geom_ribbon(aes(x = time, ymin = 0, ymax = tweets_collected), 
              fill = "chartreuse3") +
  geom_line(y = tweets_collected) + 
  xlab("Time (in minutes)") + 
  ylab("Number of Tweets (in thousands)") + 
  annotate("text", x = 8, y = 3, label = "# of Tweets Collected", size = 4) +
  annotate("text", x = 15, y = 3, label = "# of Tweets Requested", size = 4) +
  annotate("segment", x = 12, xend = 12, y = 0, yend = 20,
           linetype = "dashed") +
  annotate("text", x = 12, y = 21, label = "Rate limiting", size = 4) +
    annotate("segment", x = 9, xend = 9, y = 0, yend = 15,
           linetype = "dashed") +
  annotate("text", x = 9, y = 16, label = "Throttling", size = 4) +
  theme_classic()




```

An Example with Twitter's API
========================================================

Navigate to:

http://developer.twitter.com


developer.twitter.com
========================================================
<img src="twitter_landing.png" height="600" />


Get Started
========================================================

<img src="get_started.png" height="600" />

Create App
========================================================
<img src="create_app.png" height="600" />


App Dashboard
========================================================
<img src="no_apps.png" height="600" />


App-lication
========================================================
<img src="application_form.png" height="600" />

Callback URL
========================================================
&nbsp;

http://127.0.0.1:1410


The Waiting Is the Hardest Part...
========================================================

<img src="waiting.png" height="600" />

=
Your Developer Console
========================================================

<img src="apppage.png" height="600" />



Keys and Access Tokens
========================================================
<img src="credentials_blurred.png" height="600" />



The rtweet Package
========================================================
&nbsp;

Developed by the heroic [Michael Kerney](https://mikewk.com/about/)

```{r, eval=FALSE}
install.packages("rtweet")
```



Define Your Credentials
========================================================
class: small-code

```{r, eval=FALSE}
# load rtweet

library(rtweet)

# create credentials as objects (these are FAKE CREDENTIALS)
# you need to replace them with your own.

api_key <- "aafghaioeriokjasfkljhsa"
api_secret_key <- "234897234kasdflkjashk"

# replace "my_awesome_app" with the name of YOUR app below

token <- create_token(
  app = "my_awesome_app",
  consumer_key = api_key,
  consumer_secret = api_secret_key)

# after you run the code above, a browser window will open asking you to authorize the app. 
# Once you do, you can begin making calls

```


Your First API Call
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
covid_19_tweets<-search_tweets("coronavirus", n=4000)
```




Browse the Results
========================================================
&nbsp;
```{r, eval=FALSE}
names(covid_19_tweets)
```


Browse the Results
========================================================
&nbsp;
```{r, eval=FALSE}
head(covid_19_tweets$text)
```


Browse the Results
========================================================
<img src="covid_texts.png" height="600" />


Plot Results by Time
========================================================
class: small-code

```{r, eval=FALSE}
ts_plot(covid_19_tweets, "secs") +
  ggplot2::theme_minimal() +
  ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
  ggplot2::labs(
    x = NULL, y = NULL,
    title = "Frequency of Tweets about Covid-19 Around 1pm, May 3, 2020",
    subtitle = "Tweet counts aggregated by second",
    caption = "\nSource: Data collected from Twitter's REST API via rtweet"
  )
```

Plot Results by Time
========================================================

<img src="tsplot.png" height="600" />

Next, Let's Search by Location
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
covid_geo_tweets <- search_tweets("coronavirus",
  "lang:en", geocode = lookup_coords("usa"), 
  n = 3000, type="recent", include_rts=FALSE
  )
geocoded <- lat_lng(covid_geo_tweets)

```


Plot
========================================================
class: small-code
&nbsp;

```{r, eval=FALSE}
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25)
with(geocoded, points(lng, lat, pch = 20, cex = .50, col = rgb(0, .3, .7, .75)))
```


Plot
========================================================
&nbsp;
<img src="covid_map.png" height="600" />


Get Tweets from Individual Account
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
trump_tweets <- get_timelines(c("realDonaldTrump
"), n = 5)
head(trump_tweets$text)
```

Five Trump Tweets
========================================================
&nbsp;
<img src="trump_tweets.png" height="300" />


Get General Information About a User
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
obama_twitter_profile <- lookup_users("BarackObama")
```


Browse Fields
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
obama_twitter_profile$description
```


Browse Fields
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
obama_twitter_profile$location
```

Browse Fields
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
obama_twitter_profile$followers_count
```


Get Users' Favorites
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
obama_favorites<-get_favorites("BarackObama", n=5)
```


Get Networks
========================================================
class: small-code
&nbsp;
```{r, eval=FALSE}
watts_followers<-get_followers("duncanjwatts")
```


Check Rate Limits
========================================================
&nbsp;
```{r, eval=FALSE}
rate_limits<-rate_limit()
head(rate_limits[50:55,1:4])
```

Check Rate Limits
========================================================
&nbsp;
<img src="rate_limits.png" height="300" />


Get Trending Topics by Location
========================================================
&nbsp;
```{r, eval=FALSE}
get_trends("New York")
```


rtweet can even post tweets!
========================================================
&nbsp;
```{r, eval=FALSE}
post_tweet("This Lecture is SICSS-xy")
```
&nbsp;  

**Note: this is a very useful function if you are building a bot**

Wrapping API Calls within a Loop
========================================================



There Are R Packages for Other APIs
========================================================
&nbsp;

Here are a few: **`RgoogleMaps`, `googlelanguageR`,`rOpenSci,  `WDI`,`rOpenGov`,`rtimes`**

Many more are available but not yet on CRAN (install from github or using devtools)


A SICSS-sourced list of APIs for CSS
========================================================
&nbsp;

https://docs.google.com/spreadsheets/d/1ZEr3okdlb0zctmX0MZKo-gZKPsq5WGn1nJOxPV7al-Q/edit?usp=sharing



APIs Also do Analyses!
========================================================
&nbsp;

For example, visualization **`plotly`** 


Challenges of Working with APIs
========================================================

